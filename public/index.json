[{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/theme-documentation-basics/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 准备 由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.62.0). 为什么不支持早期版本的 Hugo?\r\r由于 Markdown 渲染钩子函数 在 Hugo 圣诞节版本 中被引入, 本主题只支持高于 0.62.0 的 Hugo 版本.\r\r 推荐使用 Hugo extended 版本\r\r由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验.\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 安装主题 LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt. 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 基础配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意\r\r在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题.\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意\r\r默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数.\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. 基本配置下的预览基本配置下的预览 \"\r基本配置下的预览\r 技巧\r\r当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新.\r\r 注意\r\r由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender \r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧\r\r网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多…\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 配置 ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外, LoveIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Matrix = \"\" Bilibili = \"\" Email = \"xxxx@xxxx.com\" RSS = true # # 文章页面配置 [params.page] # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # 是否使用 twemoji twemoji = false # 是否使用 lightgallery lightgallery = false # 是否使用 ruby 扩展语法 ruby = true # 是否使用 fraction 扩展语法 fraction = true # 是否使用 fontawesome 扩展语法 fontawesome = true # 是否在文章页面显示原始 Markdown 文档链接 linkToMarkdown = true # 是否在 RSS 中显示全文内容 rssFullText = ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 自定义样式 注意\r\rHugo extended 版本对于自定义样式是必需的.\r\r 通过定义自定义 .scss 样式文件, LoveIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 多语言和 i18n LoveIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换语言切换 \"\r语言切换\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 基本配置 学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" weight = 3 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意\r\r请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容.\r\r 技巧\r\r也可以使用 文章前置参数 来翻译网址.\r\r ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/LoveIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-06","objectID":"/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 搜索 基于 Lunr.js 或 algolia, LoveIt 主题支持搜索功能. ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎?\r\r以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 \u003cimg class=“lazyload version” src=\"/svg/loading.min.svg\" data-src=\"/svg/version/0.2.3-new.zh-cn.min.svg\" data-srcset=\"/svg/version/0.2.3-new.zh-cn.min.svg, /svg/version/0.2.3-new.zh-cn.min.svg 1.5x, /svg/version/0.2.3-new.zh-cn.min.svg 2x\" data-sizes=“auto” alt=“LoveIt 新增 | 0.2.3” title=“LoveIt 新增 | 0.2.3” /\u003e 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. \r\r 关于 algolia 的使用技巧\r\r你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. Algolia Atomic 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json…\r\r","date":"2020-03-06","objectID":"/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/theme-documentation-basics/"},{"categories":null,"content":"HTTP API文档 ","date":"2021-11-19","objectID":"/api/:0:0","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"安装镜像 使用etcher烧录镜像 SD卡格式化工具 https://www.sdcard.org/downloads/formatter/ ","date":"2021-11-19","objectID":"/api/:0:1","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"开启ssh 使用IP scan获取ip 在/boot下新建名为ssh的空文件夹 默认账户pi 密码raspberry 解锁root sudo passwd root sudo passwd --unlock root sudo vim /etc/ssh/sshd_config PermitRootLogin yes 安装omv5 export http_proxy=\"http://192.168.1.6:10101\" export https_proxy=\"https://192.168.1.6:10101\" wget -O - https://github.com/OpenMediaVault-Plugin-Developers/installScript/raw/master/install | sudo bash # omv-extras releases(as root) wget -O - https://github.com/OpenMediaVault-Plugin-Developers/packages/raw/master/install | bash 无显示器和路由器连接树莓派 把WiFi共享给以太网,默认分配的ip段是192.168.137.1 在cmdline文件头中加入,设置静态ip地址 ip=192.168.137.11 ping raspberrypi.local arp -a # 网线直连电脑和树莓派 ssh root@raspberrypi ssh root@fe80::1d07:6bcc:506d:75d5%3 树莓派换源 备份 # 软件更新源 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak # 系统更新源 sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak sudo nano /etc/apt/sources.list sudo nano /etc/apt/sources.list.d/raspi.list :%s/raspbian.raspberrypi.org/mirrors.ustc.edu.cn\\/raspbian/g :%s/archive.raspberrypi.org/mirrors.ustc.edu.cn\\/archive.raspberrypi.org/g # 中国科学技术大学(推荐使用) http://mirrors.ustc.edu.cn/raspbian/raspbian/ http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ # 阿里云(Debian报无法验证公钥问题) http://mirrors.aliyun.com/raspbian/raspbian/ http://mirrors.aliyun.com/debian/ # 清华大学 http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ 树莓派设置静态IP地址 sudo nano /etc/dhcpcd.conf sudo systemctl restart dhcpcd.service interface eth0 static ip_address=192.168.1.11/24 static routers=192.168.1.1 static domain_name_servers=192.168.1.1 interface wlan0 static ip_address=192.168.1.22/24 static routers=192.168.1.1 static domain_name_servers=192.168.1.1 sudo nano /etc/network/interfaces sudo systemctl restart networking.service auto lo iface lo inet loopback iface eth0 inet dhcp allow-hotplug wlan0 iface wlan0 inet manual address 192.168.1.22 netmask 255.255.255.0 gateway 192.168.1.1 wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf ","date":"2021-11-19","objectID":"/api/:0:2","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"配置miniDLNA 安装 sudo apt-get install minidlna 编辑/etc/minidlna.conf #A表示这个目录是存放音乐的，当minidlna读到配置文件时，它会自动加载这个目录下的音乐文件 media_dir=A,/media/pi/SAMSUNG/Music media_dir=P,/media/pi/SAMSUNG/Picture media_dir=V,/media/pi/SAMSUNG/video #配置minidlna的数库数据的存放目录 db_dir=/var/lib/DLNA/db #配置日志目录 log_dir=/var/log/DLNA # 重启 minidlna /etc/init.d/minidlna restart /etc/init.d/minidlna status # 开机自启minidlna sudo update-rc.d minidlna defaults # 启动 minidlna 服务 sudo service minidlna start # 修改配置文件及媒体资源更新时，需要强制刷新 sudo service minidlna force-reload # 取消 minidlna 的开机自动启动 sudo update-rc.d -f minidlna remove # 停止 minidlna 所有进程 sudo killall minidlna # 卸载 minidlna sudo apt-get remove --purge minidlna 报错 # 1 minidlna.c:631: error: Media directory \"P,/media/pi/SAMSUNG/Picture\" not accessible [Permission denied] # 2 minidlna.c:631: error: Media directory \"V,/media/pi/SAMSUNG/video\" not accessible [No such file or directory] # edited /etc/default/minidlna USER=root GROUP=root # then /etc/minidlna.conf user=root chown \u003cuser\u003e:\u003cgroup\u003e /var/cache/minidlna chown \u003cuser\u003e:\u003cgroup\u003e /run/minidlna 树莓派连接VNC 默认没有开通 # 选 5 network-\u003eenable vnc sudo raspi-config vnc viewer 连接报错cannot currently show the desktop # 选 7 adv-\u003eA5 设置分辨率 sudo raspi-config 树莓派默认的VNC是基于用户名密码验证,需要使用vncviewer连接 默认账户pi 密码raspberry 使用mobaxterm的vnc连接提示No configured security type is supported by 3.3 VNC Viewer 开启身份认证的VNC连接 图形化设置 单击顶部栏中的Vnc图标，打开汉堡包菜单，然后选择“选项…” 在“安全性”选项卡下，为“身份验证”选择“ VNC密码”选项 在“用户和权限”选项卡下，选择“标准用户”，然后单击“密码…”以设置您的VNC密码 重新启动RPi，您现在应该可以使用首选的VNC客户端进行连接了！ ssh配置 sudo echo 'Authentication=VncAuth' \u003e\u003e /root/.vnc/config.d/vncserver-x11 # 设置vnc连接的密码 sudo vncpasswd -service sudo reboot ","date":"2021-11-19","objectID":"/api/:0:3","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"旁路由访问国内网站很慢 国外网站访问很快,什么设置DNS,分开设置DNS都不行,看right论坛说,设置防火墙规则 # 测试可用 iptables -t nat -I POSTROUTING -j MASQUERADE # 未测试 iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE 一键设置网关,IP,DNS @echo off echo 正在修改IP地址和DNS服务器地址,请耐心等待………… echo 正在更改本机IP地址... netsh interface ipv4 set address name=\"WLAN\" source=static addr=192.168.1.100 mask=255.255.255.0 gateway=192.168.1.2 gwmetric=0 \u003enul echo 正在添加本机首选DNS服务器... netsh interface ipv4 set dns name=\"WLAN\" source=static addr=192.168.1.2 register=PRIMARY echo 正在添加备用DNS服务器... netsh interface ipv4 add dns name=\"WLAN\" addr=223.5.5.5 echo 检查当前本机配置... ipconfig /all pause dhcp方式 @echo off echo 正在修改IP地址和DNS服务器地址,请耐心等待………… echo 正在更改本机IP地址... netsh interface ipv4 set address name=\"WLAN\" source=dhcp echo 正在添加本机首选DNS服务器... netsh interface ipv4 set dns name=\"WLAN\" source=dhcp echo 检查当前本机配置... ipconfig /all pause 1.name：网络连接名称； 2.source：获取ip的途径，动态获取为dhcp，手动设置为static； 3.addr：获取的ip地址； 4.mask：子网掩码； 5.gateway：网关； 6.gwmetric：网关跃点数，可以设置为整型数值，也可以设置为“自动”:auto； 7.register： primary: 只在主 DNS 后缀下注册； none: 禁用动态 DNS 注册； both: 在主 DNS 后缀下注册，也在特定连接后缀下注册； ","date":"2021-11-19","objectID":"/api/:0:4","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"WiFi配置 https://jingyan.baidu.com/article/91f5db1b9daa3e5c7f05e3e8.html 用户可以在未启动树莓派的状态下单独修改 /boot/wpa_supplicant.conf 文件配置 WiFi 的 SSID 和密码，这样树莓派启动后会自行读取 wpa_supplicant.conf 配置文件连接 WiFi 设备。 操作方法简单：将刷好 Raspbian 系统的 SD 卡用电脑读取。在 boot 分区，也就是树莓派的 /boot 目录下新建 wpa_supplicant.conf 文件，按照下面的参考格式填入内容并保存 wpa_supplicant.conf 文件。 country=CN ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"902\" psk=\"12345678900_902\" key_mgmt=WPA-PSK priority=1 } network={ ssid=\"z\" psk=\"1234567899\" key_mgmt=WPA-PSK priority=2 scan_ssid=1 } 期间发现连不上我刷的华硕固件的隐藏WiFi # 把这行去掉,可以连接,但是提示no set country country=CN # 可以连接,可以显示其他WiFi列表 country=US vim /etc/wpa_supplicant/wpa_supplicant.conf 运行命令wpa_cli -i wlan0 reconfigure 使用ifconfig wlan0确认连接。 说明以及不同安全性的 WiFi 配置示例： #ssid:网络的ssid #psk:密码 #priority:连接优先级，数字越大优先级越高（不可以是负数） #scan_ssid:连接隐藏WiFi时需要指定该值为1 如果你的 WiFi 没有密码 network={ ssid=\"你的无线网络名称（ssid）\" key_mgmt=NONE } 如果你的 WiFi 使用WEP加密 network={ ssid=\"你的无线网络名称（ssid）\" key_mgmt=NONE wep_key0=\"你的wifi密码\" } 如果你的 WiFi 使用WPA/WPA2加密 network={ ssid=\"你的无线网络名称（ssid）\" key_mgmt=WPA-PSK psk=\"你的wifi密码\" } 如果你不清楚 WiFi 的加密模式，可以在安卓手机上用 root explorer 打开 /data/misc/wifi/wpa/wpa_supplicant.conf，查看 WiFi 的信息。 ","date":"2021-11-19","objectID":"/api/:0:5","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"HDMI连接无信号 在Windows下，进入已写入树莓派系统的SD卡，找到config.txt（最好备份一下这个）。建议，不管你是什么显示器，或者高清电视机，最好在没显示的情况，请将config.txt 中的分辨率调低一些，不要老想着，我的显示设备支持1080p，就非得一步到位。。。建议从下面的低分辨率尝试开始： 计算机显示器使用的分辨率 ： hdmi_mode=4 640x480 60Hz hdmi_mode=9 800x600 60Hz hdmi_mode=16 1024x768 60Hz CEA规定的电视规格分辨率。： hdmi_mode=2 480p 60Hz hdmi_mode=4 720p 60Hz 另外：若直接使用的是HDMI线接显示设备，请在config.txt中添加一条： hdmi_ignore_edid=0xa5000080 这个是命令树莓派不检测HDMI设备的任何信息，只按照我们指定的分辨率输出。 这样就不会自动检测显示设备的分辨率，而避免掉很多可能不显示的造成因素，就会按照你自己设置的分辨率显示。分辨率也按照上面列出的尝试，修改config.txt 中hdmi_mode=x 的”x“值。 ","date":"2021-11-19","objectID":"/api/:0:6","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"4B OpenWRT 使用无线模式中继的软路由设置 ","date":"2021-11-19","objectID":"/api/:1:0","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"opkg相关 OpenWrt镜像源 # 官方源 src/gz openwrt_core https://downloads.openwrt.org/releases/21.02.0-rc4/targets/bcm27xx/bcm2711/packages src/gz openwrt_base https://downloads.openwrt.org/releases/21.02.0-rc4/packages/aarch64_cortex-a72/base src/gz openwrt_luci https://downloads.openwrt.org/releases/21.02.0-rc4/packages/aarch64_cortex-a72/luci src/gz openwrt_packages https://downloads.openwrt.org/releases/21.02.0-rc4/packages/aarch64_cortex-a72/packages src/gz openwrt_routing https://downloads.openwrt.org/releases/21.02.0-rc4/packages/aarch64_cortex-a72/routing src/gz openwrt_telephony https://downloads.openwrt.org/releases/21.02.0-rc4/packages/aarch64_cortex-a72/telephony # 中科大 src/gz openwrt_core https://openwrt.proxy.ustclug.org/snapshots/targets/bcm27xx/bcm2711/packages src/gz openwrt_base https://openwrt.proxy.ustclug.org/snapshots/packages/aarch64_cortex-a72/base src/gz openwrt_luci https://openwrt.proxy.ustclug.org/snapshots/packages/aarch64_cortex-a72/luci src/gz openwrt_packages https://openwrt.proxy.ustclug.org/snapshots/packages/aarch64_cortex-a72/packages src/gz openwrt_routing https://openwrt.proxy.ustclug.org/snapshots/packages/aarch64_cortex-a72/routing # 清华源 src/gz openwrt_core https://mirrors.tuna.tsinghua.edu.cn/releases/21.02.0-rc4/targets/bcm27xx/bcm2711/packages src/gz openwrt_base https://mirrors.tuna.tsinghua.edu.cn/releases/21.02.0-rc4/packages/aarch64_cortex-a72/base src/gz openwrt_luci https://mirrors.tuna.tsinghua.edu.cn/releases/21.02.0-rc4/packages/aarch64_cortex-a72/luci src/gz openwrt_packages https://mirrors.tuna.tsinghua.edu.cn/releases/21.02.0-rc4/packages/aarch64_cortex-a72/packages src/gz openwrt_routing https://mirrors.tuna.tsinghua.edu.cn/releases/21.02.0-rc4/packages/aarch64_cortex-a72/routing src/gz openwrt_telephony https://mirrors.tuna.tsinghua.edu.cn/releases/21.02.0-rc4/packages/aarch64_cortex-a72/telephony 常用命令 # 查看路由器的架构 opkg print-architecture | awk '{print $2}' opkg update opkg install luci-i18n-base-zh-cn shadowsocks源 # 添加opkg key wget http://openwrt-dist.sourceforge.net/openwrt-dist.pub opkg-key add openwrt-dist.pub opkg install wget ca-certificates ca-bundle # vi /etc/opkg/customfeeds.conf src/gz openwrt_dist http://openwrt-dist.sourceforge.net/packages/base/aarch64_cortex-a72 src/gz openwrt_dist_luci http://openwrt-dist.sourceforge.net/packages/luci # 安装SHADOWSOCKS及ChinaDNS opkg update opkg install ChinaDNS iptables-mod-tproxy opkg install luci-app-chinadns opkg install shadowsocks-libev opkg install luci-app-shadowsocks # 生成中国IP列表 wget -O /tmp/delegated-apnic-latest 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' \u0026\u0026 awk -F\\| '/CN\\|ipv4/ { printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' /tmp/delegated-apnic-latest \u003e /etc/chinadns_chnroute.txt # 每周更新中国IP列表 crontab -e 0 3 * * 1 wget http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest -O /tmp/delegated-apnic-latest \u0026\u0026 awk -F\\| '/CN\\|ipv4/ { printf(\"%s/%d\\n\", $4, 32-log($5)/log(2)) }' /tmp/delegated-apnic-latest \u003e /etc/chinadns_chnroute.txt # 自启动 /etc/init.d/cron start /etc/init.d/cron enable module ‘luci.cbi’ not found: # 删LuCI缓存 rm -rf /tmp/luci-* opkg update opkg install luci luci-base luci-compat img文件选择和区别 基本上OpenWRT针对每个型号的产品都有4个文件： rpi-3-ext4-factory.img.gz rpi-3-ext4-sysupgrade.img.gz rpi-3-squashfs-factory.img.gz rpi-3-squashfs-sysupgrade.img.gz 带ext4的是可以利用Linux命令把你的tf卡空余空加拿回来做其他用途，毕竟img才几十M大小而已，一般现在的tf卡都要16G起了吧；这个下次再开一篇讲解； 带squashfs的相当于品牌路由器的rom，当你对自己安装的应用或配置不满意的时候，可以直接重置系统，就像回到初始状态一样； 带factory的是给之前不是用OpenWRT系统的用户初始刷tf卡用的； 带sysupgrade的是针对原先使用OpenWRT的用户，可以用cmd命令或者GUI界面直接升级用。 ","date":"2021-11-19","objectID":"/api/:1:1","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"4B 自编译openwrt镜像 Image for your Device sha256sum File Size Date rpi-4-ext4-factory.img.gz 31bc61700978fa8f30eeb5e888f34b665582bb8170ac6b7be7ff0d1caa3a2ca6 14328.4 KB Sun Aug 1 21:27:40 2021 rpi-4-ext4-sysupgrade.img.gz 68f87c294335efeb2404f11abebeb3723be699660bdb5e44369c5a9cc31cdd2d 14328.8 KB Sun Aug 1 21:27:41 2021 rpi-4-squashfs-factory.img.gz 93df781cc17b8eb2b64ef205fd4432b1538240300d571b1662633b1b2fd632b6 12882.0 KB Sun Aug 1 21:27:40 2021 rpi-4-squashfs-sysupgrade.img.gz 3ec10b4d8a9659cbcd157166d70c230767f86f9550fb333ef85ba205780a17ac 12882.3 KB Sun Aug 1 21:27:40 2021 bin文件名称中有两种不同的格式，jffs2与 squashfs。这两种格式的固件区别在于，squashfs格式的bin文件安装后，会占用一定的空间来存放系统的一些必要文件，这些文件都只是可读的，其作用是帮助恢复系统。当OpenWrt崩溃时，可以基于这些文件，使用firstboot脚本重建初始系统，而jffs2则不会存储这样的文件，好处是节省了空间。一般使用squashfs格式的固件，方便恢复系统到初始状态。 factory与sysupgrade，这两者的区别是，factory多了一些验证的东西，用于在原厂固件的基础上进行升级，如果已经是OpenWrt，直接使用sysupgrade文件即可。并且，在原厂固件的基础上进行升级时，首先使用factory文件，然后需要再次使用 sysupgrade文件，选择不保留原来配置进行升级。 https://leux.cn/doc/OPENWRT%E7%BC%96%E8%AF%91%E4%B9%8B%E6%A0%91%E8%8E%93%E6%B4%BE4B.html # 安装编译工具 sudo apt-get update sudo apt-get install build-essential asciidoc binutils bzip2 \\ gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev \\ lib32gcc1 libc6-dev-i386 subversion flex uglifyjs libssl-dev upx \\ gcc-multilib p7zip p7zip-full msmtp texinfo libglib2.0-dev xmlto \\ git-core qemu-utils libelf-dev autoconf automake libtool autopoint \\ curl wget device-tree-compiler 注意：不要使用root用户编译，最好准备好梯子 编译后在openwrt/bin/targets/brcm2708/bcm2711/下找到openwrt-brcm2708-bcm2711-rpi-4-ext4-factory.img.gz，把其中的img刷入SD卡中即可 # 下载源码，二选一即可 mkdir openwrt cd openwrt/ git clone https://git.openwrt.org/openwrt/openwrt.git ./ # openwrt官方源码 git clone https://github.com/coolsnowwolf/lede ./ # lean版魔改源码 # 以后每次编译前建议执行以下三行命令更新源码 git pull ./scripts/feeds update -a ./scripts/feeds install -a make defconfig # 测试编译环境 make menuconfig # 配置编译参数 make download -j8 V=s # 下载所需源码，请尽量使用梯子 make -j1 V=s # 首次编译推荐用单线程 # 再次编译前建议使用make clean清理 make clean # 清除bin目录 make dirclean # 清除bin目录和交叉编译工具及工具链目录 make distclean # 清除所有相关的东西，包括下载的软件包，配置文件，feed内容等 固件编译配置 简单的make menuconfig参数配置，除必选配置外的其他项可自行选择 基础配置 # 必选配置 Target System -\u003e Broadcom BCM27xx Subtarget -\u003e BCM2711 boards (64 bit) Target Profile -\u003e Raspberry Pi 4B # 镜像参数 Target Images -\u003e ext4 # ext4格式的固件可方便地调整分区大小 Target Images -\u003e squashfs # squashfs格式的固件可恢复出厂设置 Target Images -\u003e Kernel partition size = 20 # boot分区大小为20M Target Images -\u003e Root filesystem partition size = 500 # root分区大小为500M # 可选工具 Base system -\u003e block-mount # 在LuCI界面添加\u003c挂载点\u003e菜单 Base system -\u003e blockd # 自动挂载设备 Administration -\u003e htop # 添加htop命令 Firmware -\u003e xxx # 选择你需要的网卡固件，默认即可 内核模块 # 文件系统 Kernel modules -\u003e Filesystems -\u003e kmod-fs-ext4 Kernel modules -\u003e Filesystems -\u003e kmod-fs-ntfs Kernel modules -\u003e Filesystems -\u003e kmod-fs-squashfs Kernel modules -\u003e Filesystems -\u003e kmod-fs-vfat Kernel modules -\u003e Filesystems -\u003e kmod-fuse # 网卡支持 Kernel modules -\u003e Network Devices -\u003e kmod-xxx # 有线网卡支持，默认即可 Kernel modules -\u003e USB Support -\u003e kmod-usb-net -\u003e kmod-usb-net-xxx # USB有线网卡支持，默认即可 Kernel modules -\u003e Wireless Drivers -\u003e kmod-xxx # 无线网卡支持，默认即可 # USB支持 Kernel modules -\u003e USB Support -\u003e kmod-usb-core # 启用USB支持 Kernel modules -\u003e USB Support -\u003e kmod-usb-hid # USB键鼠支持 Kernel modules -\u003e USB Support -\u003e kmod-usb-storage # 启用USB存储 Kernel modules -\u003e USB Support -\u003e kmod-usb-storage-extras Kernel modules -\u003e USB Support -\u003e kmod-usb-usb2 # 开启USB2支持 Kernel modules -\u003e USB Support -\u003e kmod-usb-usb3 # 开启USB3支持 LuCI设置 # LuCI设置 LuCI -\u003e Collections -\u003e luci # 开启luci LuCI -\u003e Modules -\u003e Translations -\u003e Chinese(zh-cn) # 中文支持 LuCI -\u003e Themes -\u003e luci-theme-material # 添加皮肤 # LuCI应用 LuCI -\u003e Applications -\u003e luci-app-aria2 # 下载工具 LuCI -\u003e Applications -\u003e luci-app-firewall # 防 火 墙 LuCI -\u003e Applications -\u003e luci-app-hd-idle # 硬盘休眠 LuCI -\u003e Applications -\u003e luci-app-opkg # 软 件 包 LuCI -\u003e Applications -\u003e luci-app-qos # 服务质量 LuCI -\u003e Applications -\u003e luci-app-samba # 网络共享 LuCI -\u003e Applications -\u003e luci-app-shadowsocks-libev # 翻墙软件 LuCI -\u003e Applications -\u003e luci-app-upnp # UPnP服务 LuCI -\u003e Applications -\u003e luci-a","date":"2021-11-19","objectID":"/api/:1:2","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"树莓派安装centos7 初始账号：root 密码：centos 将可用分区扩展到整个SD卡 /usr/bin/rootfs-expand df -Th 这里就可以看到扩展以后的分区了 ","date":"2021-11-19","objectID":"/api/:1:3","tags":null,"title":"HTTP API文档","uri":"/api/"},{"categories":null,"content":"关于我 软件小生一枚，苦逼的修炼JAVA，爱安全，爱妹子，爱逗比的二笔小青年! 微信公众号:crazyshare,直接搜索不一样的少年也可以关注,或者扫描下面的二维码 版权声明 著作权归作者所有。大家可以随意转载，引用。但需要注明出处。 商业转载请联系作者获得授权，非商业转载请注明出处。 作者：不一样的少年 链接：https://www.b521.net ","date":"2016-08-02","objectID":"/about/:0:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"友情链接 不一样的少年 简介 一款小游戏 友链的戳我 版权声明 著作权归作者所有。大家可以随意转载，引用。但需要注明出处。 商业转载请联系作者获得授权，非商业转载请注明出处。 作者：不一样的少年 链接：https://www.b521.net ","date":"2016-08-02","objectID":"/friends/:0:0","tags":null,"title":"友情链接","uri":"/friends/"},{"categories":["linux"],"content":"hello world! ","date":"2016-03-04","objectID":"/first-post/:0:0","tags":["one"],"title":"First","uri":"/first-post/"}]